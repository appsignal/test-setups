#!/bin/bash

set -eu

install_opentelemetry_extension_with_pecl() {
  echo "Installing OpenTelemetry extension..."
  pecl install opentelemetry

  # The path here matches the path that `php.ini` is written to in the Dockerfile
  echo "extension=opentelemetry.so" > /etc/php/8.4/cli/conf.d/99-sail.ini
}

install_opentelemetry_extension_with_pie() {
  echo "Installing PHP pie..."
  curl -L https://github.com/php/pie/releases/latest/download/pie.phar -o /usr/local/bin/pie
  chmod +x /usr/local/bin/pie

  echo "Installing OpenTelemetry extension..."
  pie install open-telemetry/ext-opentelemetry

  # No need to add the extension to the php.ini file,
  # as `pie` does this automatically
}

install_opentelemetry_extension_with_pickle() {
  echo "Installing PHP pickle..."
  curl -L https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar -o /usr/local/bin/pickle
  chmod +x /usr/local/bin/pickle

  echo "Installing OpenTelemetry extension..."
  pickle install opentelemetry

  # The path here matches the path that `php.ini` is written to in the Dockerfile
  echo "extension=opentelemetry.so" > /etc/php/8.4/cli/conf.d/99-sail.ini
}

# install_opentelemetry_extension_with_pecl
install_opentelemetry_extension_with_pie
# install_opentelemetry_extension_with_pickle

cd /var/www/html

# Fix file permissions on CI
chmod -R 777 /var/www/html

# Fix environment variable file
echo "Creating .env file..."

rm .env || true

cp .env.example .env

echo "APPSIGNAL_APP_NAME=${APPSIGNAL_APP_NAME}" >> .env
echo "APPSIGNAL_APP_ENV=${APPSIGNAL_APP_ENV}" >> .env
echo "APPSIGNAL_PUSH_API_KEY=${APPSIGNAL_PUSH_API_KEY}" >> .env

# It is necessary to unexport these environment variables.
# If an environment variable is both exported and set in the `.env` file,
# the variable will be unset in `$_ENV` when the Composer autoloader files
# are generated.
export -n APPSIGNAL_APP_NAME
export -n APPSIGNAL_APP_ENV
export -n APPSIGNAL_PUSH_API_KEY

echo "Installing dependencies..."
composer install

echo "Migrating database..."

until mysqladmin ping -h${DB_HOST} -u${DB_USERNAME} -p${DB_PASSWORD} --silent; do
  echo "Waiting for database to start..."
  sleep 1
done

echo "Database started!"
/var/www/html/artisan migrate:fresh

echo "Cleaning caches..."
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan event:clear
php artisan cache:clear

echo "Starting the application..."
start-container
